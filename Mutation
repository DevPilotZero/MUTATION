-- Grow a Garden | Pet Mutation GUI (With Passives)
-- Made by ChatGPT

-- Load Orion UI Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({
    Name = "Grow A Garden | Mutation Hub",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "GrowGardenMutate"
})

local selectedPet = nil
local selectedMutation = nil
local mutationDescription = "Select a mutation to see its passive effect."
local petData = {}

-- Function to Get Player's Pets (Adjust if game uses different structure)
local function GetPets()
    petData = {}
    local player = game.Players.LocalPlayer
    local petsFolder = player:FindFirstChild("Pets") or player:WaitForChild("Pets")
    for _, pet in pairs(petsFolder:GetChildren()) do
        table.insert(petData, pet.Name)
    end
end
GetPets()

-- ✅ Mutation List with Passives
local mutationData = {
    Shiny = "Boosts all stats slightly (+15%).",
    Inverted = "Flips pet visuals; minor stat change.",
    Frozen = "Adds freeze effect; slows enemies.",
    Windy = "Boosts speed/agility stats.",
    Golden = "Huge boost to value and drop luck (+30%).",
    Mega = "Massive stat boost; increases size.",
    Tiny = "Shrinks size; boosts speed and luck.",
    IronSkin = "Increases defense and durability.",
    Radiant = "Balanced boost; adds glowing effect.",
    Rainbow = "Rare multi-boost to all stats.",
    Shocked = "Adds electric aura; boosts attack.",
    Ascended = "Ultimate boost (+100%); rare mutation."
}

-- ✅ Convert Keys to Array for Dropdown
local mutationTypes = {}
for mutationName, _ in pairs(mutationData) do
    table.insert(mutationTypes, mutationName)
end

-- Create Tab
local Tab = Window:MakeTab({
    Name = "Pet Mutation",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Dropdown for Pet Selection
Tab:AddDropdown({
    Name = "Select Pet",
    Default = "",
    Options = petData,
    Callback = function(Value)
        selectedPet = Value
    end
})

-- Dropdown for Mutation Type
Tab:AddDropdown({
    Name = "Select Mutation",
    Default = "",
    Options = mutationTypes,
    Callback = function(Value)
        selectedMutation = Value
        mutationDescription = mutationData[Value] or "No description available."
        OrionLib:MakeNotification({
            Name = "Mutation Info",
            Content = Value.." - "..mutationDescription,
            Image = "rbxassetid://4483345998",
            Time = 4
        })
    end
})

-- Label for Passive Effect (Updates Dynamically)
Tab:AddLabel("Passive Effect: Select a mutation.")

-- Button to Apply Mutation
Tab:AddButton({
    Name = "Apply Mutation",
    Callback = function()
        if selectedPet and selectedMutation then
            -- ✅ Replace this with actual RemoteEvent
            local remote = game:GetService("ReplicatedStorage"):FindFirstChild("MutatePet") 
            if remote then
                local args = {
                    [1] = selectedPet,
                    [2] = selectedMutation
                }
                remote:FireServer(unpack(args))
                OrionLib:MakeNotification({
                    Name = "Success",
                    Content = "Applied "..selectedMutation.." to "..selectedPet,
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            else
                OrionLib:MakeNotification({
                    Name = "Error",
                    Content = "RemoteEvent not found! Update script.",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Select a pet and mutation first!",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

OrionLib:Init()
